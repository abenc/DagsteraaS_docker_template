services:
  docker_dagit:
    build: 
      context: .
      dockerfile: ./dagster_Dockerfile.dockerfile
    entrypoint:
      - dagit
      - -h
      - -"0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: docker_dagit
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_PG_USER: "postgres"
      DAGSTER_PG_PASSWORD: "dagster"
      DAGSTER_PG_DB: "dagster"
      DAGSTER_PG_HOST: "10.32.240.3"
    volumes: # Make docker client accessible so we can terminate containers from dagit
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_network

  docker_daemon:
    build:
      context: .
      dockerfile: ./dagster_Dockerfile.dockerfile
    entrypoint:
      - dagster-daemon
      - run
    container_name: docker_daemon
    restart: on-failure
    environment:
      DAGSTER_PG_USER: "postgres"
      DAGSTER_PG_PASSWORD: "dagster"
      DAGSTER_PG_DB: "dagster"
      DAGSTER_PG_HOST: "10.32.240.3"
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_network

  docker_example_user_code:
    build:
      context: .
      dockerfile: ./Dockerfile_user_code
    entrypoint: 
      - dagster
      - api
      - grpc
      - -h
      - "0.0.0.0"
      - -p
      - "4000"
      - -f
      - repo.py

    container_name: docker_example_user_code
    image: docker_example_user_code_image
    expose:
      - "4000"
    ports:
      - "4000:4000"
    restart: always
    environment:
      DAGSTER_PG_USER: "postgres"
      DAGSTER_PG_PASSWORD: "dagster"
      DAGSTER_PG_DB: "dagster"
      DAGSTER_PG_HOST: "10.32.240.3"
      DAGSTER_CURRENT_IMAGE: "docker_example_user_code_image"
    networks:
      - docker_network

networks:
  docker_network:
    driver: bridge
    name: docker_network

